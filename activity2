# Credit Activity 1 â€“ Unsupervised Learning with K-Means
# Roll No: 124 | Dataset: Shows (Synthetic Data)

# -------------------------
# 1. Import Libraries
# -------------------------
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import silhouette_score

# -------------------------
# 2. Create Synthetic "Shows" Dataset
# -------------------------
data = {
    "Show_Name": [
        "Mystery Manor", "Laugh Out Loud", "Space Odyssey", "Cooking Queen",
        "Battle Arena", "Romantic Rain", "Crime Files", "Fantasy World",
        "Horror Nights", "History Rewind", "Tech Talk", "Dance Fever",
        "Wildlife Wonders", "The Great Chef", "Future Wars"
    ],
    "Genre": [
        "Mystery", "Comedy", "Sci-Fi", "Cooking",
        "Action", "Romance", "Crime", "Fantasy",
        "Horror", "Documentary", "Tech", "Dance",
        "Documentary", "Cooking", "Sci-Fi"
    ],
    "Seasons": [3, 5, 2, 4, 6, 1, 7, 3, 2, 4, 3, 5, 2, 4, 6],
    "Avg_Rating": [8.5, 7.8, 9.0, 8.1, 7.2, 8.9, 9.2, 8.0, 7.4, 8.7, 7.9, 8.3, 8.8, 8.2, 8.6],
    "Total_Views": [2.1, 4.5, 1.8, 3.3, 5.2, 1.5, 4.9, 2.8, 2.0, 1.9, 3.6, 4.2, 2.3, 3.0, 4.1]
}

df = pd.DataFrame(data)

print("First 5 rows of dataset:")
display(df.head())

print("\nDataset Info:")
print(df.info())

# -------------------------
# 3. Data Preprocessing
# -------------------------
df = df.dropna()  # Remove missing values if any

# Select only numerical columns for clustering
num_df = df.select_dtypes(include=['int64', 'float64'])

# Standardize data
scaler = StandardScaler()
scaled_data = scaler.fit_transform(num_df)

# -------------------------
# 4. Find Optimal Number of Clusters (Elbow Method)
# -------------------------
inertia_values = []
K_range = range(2, 11)

for k in K_range:
    kmeans = KMeans(n_clusters=k, random_state=42)
    kmeans.fit(scaled_data)
    inertia_values.append(kmeans.inertia_)

plt.figure(figsize=(6,4))
plt.plot(K_range, inertia_values, marker='o')
plt.xlabel('Number of Clusters (k)')
plt.ylabel('Inertia')
plt.title('Elbow Method for Optimal k')
plt.show()

# -------------------------
# 5. Silhouette Score Check
# -------------------------
for k in range(2, 6):
    kmeans = KMeans(n_clusters=k, random_state=42)
    cluster_labels = kmeans.fit_predict(scaled_data)
    score = silhouette_score(scaled_data, cluster_labels)
    print(f"Silhouette Score for k={k}: {score:.4f}")

# -------------------------
# 6. Apply K-Means (Choose your k)
# -------------------------
k_optimal = 3  # Change based on elbow/silhouette results
kmeans = KMeans(n_clusters=k_optimal, random_state=42)
df['Cluster'] = kmeans.fit_predict(scaled_data)

print("\nCluster Counts:")
print(df['Cluster'].value_counts())

# -------------------------
# 7. Visualization (First 2 Numerical Columns)
# -------------------------
plt.figure(figsize=(8,6))
sns.scatterplot(
    x=num_df.columns[0], 
    y=num_df.columns[1], 
    hue=df['Cluster'], 
    palette='Set1',
    data=df
)
plt.title(f"K-Means Clustering (k={k_optimal})")
plt.legend(title='Cluster')
plt.show()
