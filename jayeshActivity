# Credit Activity 1 â€“ Unsupervised Learning with K-Means
# Roll No: 113 | Dataset: Salary (Synthetic Data)

# -------------------------
# 1. Import Libraries
# -------------------------
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import silhouette_score

# -------------------------
# 2. Create Synthetic "Salary" Dataset
# -------------------------
data = {
    "Employee_ID": range(1, 16),
    "Years_Experience": [1, 3, 5, 2, 7, 10, 4, 6, 8, 12, 15, 9, 11, 13, 14],
    "Education_Level": [1, 2, 3, 1, 2, 3, 2, 3, 1, 2, 3, 1, 2, 3, 2],  # 1=High School, 2=Bachelor, 3=Master
    "Age": [22, 25, 28, 24, 32, 40, 27, 30, 35, 45, 50, 33, 42, 47, 48],
    "Annual_Salary": [25000, 35000, 50000, 30000, 65000, 90000, 45000, 60000, 75000, 100000, 120000, 80000, 95000, 110000, 115000]
}

df = pd.DataFrame(data)

print("First 5 rows of dataset:")
display(df.head())

print("\nDataset Info:")
print(df.info())

# -------------------------
# 3. Data Preprocessing
# -------------------------
df = df.dropna()

# Select only numerical columns for clustering (ignoring Employee_ID)
num_df = df.drop(columns=["Employee_ID"])

# Standardize data
scaler = StandardScaler()
scaled_data = scaler.fit_transform(num_df)

# -------------------------
# 4. Find Optimal Number of Clusters (Elbow Method)
# -------------------------
inertia_values = []
K_range = range(2, 11)

for k in K_range:
    kmeans = KMeans(n_clusters=k, random_state=42)
    kmeans.fit(scaled_data)
    inertia_values.append(kmeans.inertia_)

plt.figure(figsize=(6,4))
plt.plot(K_range, inertia_values, marker='o')
plt.xlabel('Number of Clusters (k)')
plt.ylabel('Inertia')
plt.title('Elbow Method for Optimal k')
plt.show()

# -------------------------
# 5. Silhouette Score Check
# -------------------------
for k in range(2, 6):
    kmeans = KMeans(n_clusters=k, random_state=42)
    cluster_labels = kmeans.fit_predict(scaled_data)
    score = silhouette_score(scaled_data, cluster_labels)
    print(f"Silhouette Score for k={k}: {score:.4f}")

# -------------------------
# 6. Apply K-Means (Choose your k)
# -------------------------
k_optimal = 3  # Change based on elbow/silhouette results
kmeans = KMeans(n_clusters=k_optimal, random_state=42)
df['Cluster'] = kmeans.fit_predict(scaled_data)

print("\nCluster Counts:")
print(df['Cluster'].value_counts())

# -------------------------
# 7. Visualization (Years Experience vs Annual Salary)
# -------------------------
plt.figure(figsize=(8,6))
sns.scatterplot(
    x="Years_Experience", 
    y="Annual_Salary", 
    hue="Cluster", 
    palette='Set1',
    data=df
)
plt.title(f"K-Means Clustering (k={k_optimal})")
plt.legend(title='Cluster')
plt.show()
