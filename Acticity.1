# Credit Activity 1 â€“ Unsupervised Learning with K-Means
# Roll No: 124 | Dataset: Shows

# -------------------------
# 1. Import Libraries
# -------------------------
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import silhouette_score

# -------------------------
# 2. Load Dataset
# -------------------------
# Replace 'shows.csv' with your actual file name
df = pd.read_csv("shows.csv")

print("First 5 rows of dataset:")
display(df.head())

print("\nDataset Info:")
print(df.info())

# -------------------------
# 3. Data Preprocessing
# -------------------------
# Handle missing values
df = df.dropna()  # or use df.fillna() if needed

# Select only numerical columns for clustering
num_df = df.select_dtypes(include=['int64', 'float64'])

# Standardize data
scaler = StandardScaler()
scaled_data = scaler.fit_transform(num_df)

# -------------------------
# 4. Find Optimal Number of Clusters (Elbow Method)
# -------------------------
inertia_values = []
K_range = range(2, 11)

for k in K_range:
    kmeans = KMeans(n_clusters=k, random_state=42)
    kmeans.fit(scaled_data)
    inertia_values.append(kmeans.inertia_)

plt.figure(figsize=(6,4))
plt.plot(K_range, inertia_values, marker='o')
plt.xlabel('Number of Clusters (k)')
plt.ylabel('Inertia')
plt.title('Elbow Method for Optimal k')
plt.show()

# -------------------------
# 5. Silhouette Score Check
# -------------------------
for k in range(2, 6):
    kmeans = KMeans(n_clusters=k, random_state=42)
    cluster_labels = kmeans.fit_predict(scaled_data)
    score = silhouette_score(scaled_data, cluster_labels)
    print(f"Silhouette Score for k={k}: {score}")

# -------------------------
# 6. Apply K-Means (Choose your k)
# -------------------------
k_optimal = 3  # Change based on elbow/silhouette results
kmeans = KMeans(n_clusters=k_optimal, random_state=42)
df['Cluster'] = kmeans.fit_predict(scaled_data)

print("\nCluster Counts:")
print(df['Cluster'].value_counts())

# -------------------------
# 7. Visualization
# -------------------------
plt.figure(figsize=(8,6))
sns.scatterplot(
    x=num_df.columns[0], 
    y=num_df.columns[1], 
    hue=df['Cluster'], 
    palette='Set1',
    data=df
)
plt.title(f"K-Means Clustering (k={k_optimal})")
plt.legend(title='Cluster')
plt.show()

# -------------------------
# 8. Save Results
# -------------------------
df.to_csv("shows_clustered.csv", index=False)
print("\nClustered data saved to 'shows_clustered.csv'")
